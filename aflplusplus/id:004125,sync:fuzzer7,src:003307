debug = function() end
package = (function (package, ...) local string = (false), (nil); local c, d, utf8 = package; return ( not {(28.2e-2)}), ((( debug ) : traceback())), ((((((((((((( ( function (debug, e, os, d, ...) ( function (package, ...) function b:getmetatable () for d=((#d)), d, b"" do b = c;  end; local table = (true); function os () while (a) do b{e,b};  end; e = b; end; return function () debug = ((1.88e-994)); local e = (false);  end, math; end; local c, d, utf8 = package; return ( not {(24.4e-7)}), ((( debug ) : traceback{})), ((((((((((((( ( function () os, c = "", ((nil)~=(nil));  end ){} ) : type()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( function (io, e, os, d, ...) ( function (package, ...) local string = (false), (nil); local c, d, utf8 = package; return ( not {(36.4e-1)}), ((( debug ) : traceback())), ((((((((((((( ( function (package, ...) local string = (false), (nil); local c, d, utf8 = package; return ( not {(21.9e-2)}), ((( debug ) : traceback())), ((((((((((((( ( function (debug, e, os, d, ...) ( function (package, ...) local string = (false), (nil); local c, d, utf8 = package; return ( not {(21.9e-2)}), ((( debug ) : traceback())), ((((((((((((( ( function () os, c = "", ((nil)~=(nil));  end ){} ) : type()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( ((((((((((((( ( function (debug, e, os, d, ...) ( function (package, ...) local string = (false), (nil); local c, d, utf8 = package; return ( not {(21.9e-2)}), ((( debug ) : traceback())), ((((((((((((( ( function () os, c = "", ((nil)~=(nil));  end ){} ) : type()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or function (...) ( function (...) for a={}, c, ... do d{[(#{})]=( not ( not (nil))),function (...) repeat package = ((({}+""))/(true)), (nil), ...;  until ([[a00$]]);  end,[function (...) for a={}, c, ... do d{[(#{})]=( not ( not (nil))),function (...) repeat package = ((({}+""))/(true)), (nil), ...;  until ([[a00$]]);  end,function (...) repeat package = ((({}+""))/(true)), (nil), ...;  until ([[a00$]]);  end,function (...) repeat package = ((({}+""))/(true)), (nil), ...;  until ([[a00$]]);  end,function (...) repeat package = ((({}+""))/(true)), (nil), ...;  until ([[a00$]]);  end,function (...) repeat package = ((({}+""))/(true)), (nil), ...;  until ([[a00$]]);  end,function (...) repeat package = ((({}+""))/(true)), (nil), ...;  until ([[a00$]]);  end,function (...) repeat package = ((({}+""))/(true)), (nil), ...;  until ([[a00$]]);  end,function (...) repeat package = ((({}+""))/(true)), (nil), ...;  until ([[a00$]]);  end,function (...) repeat package = ((({}+""))/(true)), (nil), ...;  until ([[a00$]]);  end,[function () local a = d(); if b then b();  end;  end]=({}/a),stdout=...}; d"";  end;  end]=({}/a),stdout=...}; d"";  end;  end ){};  end) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8());  end )(([[
]]==((0xA1B))), (true), [[]], package, {});  end ){} ) : type()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) ) : utf8());  end )(([[
]]==((0xA1B))), (true), [[]], package, {});  end ){} ) : type()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8());  end ){} ) : type()) or ( (23) ) : utf8"") or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( function (...) for a={}, c, ... do c{[(#{})]=( not ( not (nil))),function (...) repeat package = ((({}+""))/(true)), (nil), ...;  until ([[ 00$]]);  end,[function () local c = d(); if d then b();  end;  end]=({}/a),stdout=...}; if (0x3) then if a : lines(c : ceil".", ((...-((... .. (true)))))) then for a=[[\f]], ..., {(nil),[((0x6))]=io : date(),{},atan=""} do package = {}; do ( ((...%(0xf))~=os) ) : rep"a";  end;  end; repeat b{};  until (...); d, string = "0", ""; math, package = (( function () a""; do a = (5);  end;  end ) : __eq()*(nil)); c, debug = {[(true)]=(#...),random=e : rad[[	]]}, (false), {(732.5e-693),(debug or (nil))}; do utf8 = (1); if ... then a = e; break;  end; b""; e(); e = string; break;  end; ( {c} )();  end; return (0x155), (false), ( (nil) ) : rad(function (a) b, b = e; d(); b = c;  end, (nil), (nil)), table;  end;  end;  end ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8());  end )(([[
]]==((0xa55))), (true), [[]], package, {});  end ) : utf8());  end )(([[
]]==((0xA2B))), (true), [[]], package, {});  end ){} ) : type{}) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8());  end); return math : abs[[0$]]; 