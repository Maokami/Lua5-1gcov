debug = function() end
( ([[$]]) ) : gsub([[]], (function (...) ( function (io, e, os, c, ...) ( ([[$]]) ) : gsub([[]], (function (package, ...) local string = (false), (nil); local c, d, utf8 = package; return ( not {(28.2e-2)}), ((( debug ) : traceback())), ((((((((((((( ( function (debug, e, os, d, ...) ( function (package, ...) function b:getmetatable () for d=((#d)), d, b"" do b = c;  end; local table = (true); function os () while (a) do b{e,b};  end; e = b; end; return function () debug = ((1.88e-994)); local e = (false);  end, math; end; local c, d, utf8 = package; return ( not {(24.4e-7)}), ((( debug ) : traceback{})), ((((((((((((( ( function () os, c = "", ((nil)~=(nil));  end ){} ) : type()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8());  end )(([[
]]==((0xA2B))), (true), [[]], package, {});  end ){} ) : type{}) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8(function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, function (...) repeat do a(c);  end; if (((61))) then os = d;  else b{}; ( function (io, e, os, e, ...) ( function (package, ...) local string = (false), (nil); local c, d, utf8 = package; return ( not {(21.9e-2)}), ((( debug ) : traceback())), ((((((((((((( ( function (debug, e, os, d, ...) ( function (package, ...) local string = (false), (nil); local c, d, utf8 = package; return ( not {(21.9e-2)}), ((( debug ) : traceback())), ((((((((((((( ( function () os, c = "", ((nil)~=(nil));  end ){} ) : type()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( ((((((((((((( ( function (debug, e, os, d, ...) ( function (package, ...) local string = (false), (nil); local c, d, utf8 = package; return ( not {(21.9e-2)}), ((( debug ) : traceback())), ((((((((((((( ( function () os, c = "", ((nil)~=(nil));  end ){} ) : type()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or function (...) ( function (...) for a={}, c, ... do d{[(#{})]=( not ( not (nil))),function (...) repeat package = ((({}+""))/(true)), (nil), ...;  until ([[a00$]]);  end,[function (...) for a={}, c, ... do d{[(#{})]=( not ( not (nil))),function (...) repeat package = ((({}+""))/(true)), (nil), ...;  until ([[a00$]]);  end,function (...) repeat package = ((({}+""))/(true)), (nil), ...;  until ([[a00$]]);  end,function (...) repeat package = ((({}+""))/(true)), (nil), ...;  until ([[a00$]]);  end,function (...) repeat package = ((({}+""))/(true)), (nil), ...;  until ([[a00$]]);  end,function (...) repeat package = ((({}+""))/(true)), (nil), ...;  until ([[a00$]]);  end,function (...) repeat package = ((({}+""))/(true)), (nil), ...;  until ([[a00$]]);  end,function (...) repeat package = ((({}+""))/(true)), (nil), ...;  until ([[a00$]]);  end,function (...) repeat package = ((({}+""))/(true)), (nil), ...;  until ([[a00$]]);  end,function (...) repeat package = ((({}+""))/(true)), (nil), ...;  until ([[a00$]]);  end,[function () local a = d(); if b then b();  end;  end]=({}/a),stdout=...}; d"";  end;  end]=({}/a),stdout=...}; d"";  end;  end ){};  end) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8());  end )(([[
]]==((0xA1B))), (true), [[]], package, {});  end ){} ) : type()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) ) : utf8());  end )(([[
]]==((0xA1B))), (true), [[]], package, {});  end ){} ) : type()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8()) or ( (68) ) : utf8());  end )(([[
]]==((0x1Af))), (true), [[]], package, {});  end )"";  end; return (0x5Bc);  until ((true));  end, function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, [[$]], {})) or ( (68) ) : utf8()) or ( (68) ) : utf8());  end));  end ){};  end)); 