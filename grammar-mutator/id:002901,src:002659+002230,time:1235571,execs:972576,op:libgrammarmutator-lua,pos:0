debug = function() end
if {match=(nil)} then local io, b, utf8, table, c, c, os, math, package, a = [[a]]; utf8(( function (...) function getinfo () local b = (nil); local table, a, b, c, utf8, table, e = function (e, e, package) ( (false) )[[]]; for debug=( not (nil)), [[]], (nil) do repeat function b:remove (...) function pi () c{e}; e(); c = ""; end; do debug, string, table = ..., function () b = (false), {[(0xd9)]=(nil)}; return (({{(nil),(-( function (...) for self=[[]], (string), (#(((table : asin[[]])-(-function () function self:lines (...) e : pi{write=(4.09e48)}; end; return (0x9);  end)))) do if ... then local package, utf8 = ...; for c=(table<=[[]]), ..., ... do string = ((23e-4)); return (function (...) for self=[[]], (string), (#(((table : asin[[]])-(-function () function self:lines (...) e : pi{write=function () b = (false), {[(0xa5)]=(nil)}; return (({{(nil),(-( function (...) for self=[[]], (string), (#(((table : asin[[]])-(-function () function self:lines (...) e : pi{write=(9.42e25)}; end; return (0x9);  end)))) do if ... then local package, utf8 = ...; for b=(table<=[[]]), ..., ... do if a then while ((65e-8)) do c(); if (9e6) then if (true) then if debug then e{c}; break;  end; return (#(((false))/d : flush())), c, utf8;  end;  else d = b, e; if [[]] then local self, utf8, d, string, self = ( [[]] ){}; if (0xb) then if (19025.28) then a{}; break;  else d, self = {G=d,G=d}; e""; local e = (d); break;  end; os, c, package, debug, d, table = (false); self, io, string, utf8, a, utf8, package, table = (0xfbb);  else function utf8:len () if (true) then while ((true)) do b = (7); break;  end;  end; if ... then do a = {b};  end; return (b), b, (-(true)), (true);  end; end; do function assert (math, os) if (1) then c(a); break;  end; break; end; do e, c = ...; e""; break;  end; ( (-((#d)-e : G({}))) ) : getmetatable".."; if (#([[]])) then io{a}; a = (e); break;  else if (#a) then d{}; break;  else b(c);  end;  end; for b=(0xB), {}, ( e ) : G[[]] do ( {(6.2e925)} ) : preload{[((nil)%c())]=[[]]}; do for c=(c), (false), "" do b = d;  end; e, e = ( not ((a>e)^(0xe))); c = (e*{}); a{};  end;  end; return (nil), (nil);  end;  end; break;  end;  end;  end;  end; if e then table[[]]; function io:getregistry (self) function a:offset (...) e : loadfile[[ ]]; return ((true)%[[]]); end; if "" then e"";  end; end; break;  end; a(); return (((#...))/math);  end;  end; math : loaded[[]]; local d = ""; if ... then if ... then if function (...) while ((false)) do e(); d{"",e}; local a = e;  end;  end then if (true) then if ... then local b, c = ((false)^(function (d) a = (c); e = a, a; return (1e5), e;  end)); break;  else if self then e{}; return e;  end; if ((nil)<c) then if {b} then e(); break;  end;  else d(); break;  end;  end;  end; break;  else if c then a""; break;  end; if [[]] then while (d"") do a(a); function d:os (a) e{}; self, package, io = (( c ) : os(...)); break; end;  end;  end;  end;  else a{};  end; e{};  end;  end; return c;  end ){})}}));  end}; end; return c;  end)))) do a{};  end; return c;  end/e);  end;  end; e();  end; return c;  end ){})}}));  end; d();  end; d""; end; d"";  until (e); break;  end; break;  end; end;  end )({}, (false)), (-[[.]]));  end; 