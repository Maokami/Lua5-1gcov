debug = function() end
( function (d, c) function getinfo () local b = (nil); local table, a, e, d, utf8, table, e = function (e, e, package) ( (false) )[[]]; for debug=( not (nil)), [[]], (nil) do repeat function b:remove (...) function pi () b{e}; ( function (...) function getinfo () local b = (nil); local table, a, b, c, utf8, table, e = function (e, e, package) ( (false) )[[]]; for debug=( not (nil)), [[]], (nil) do repeat function b:remove (...) function pi () c{e}; e(); c = ""; end; do debug, string, table = ..., function () b = (false), {[(0xd9)]=(nil)}; return (({{(nil),(-( function (...) for self=[[]], (string), (#(((table : asin[[]])-(-function () function self:lines (...) e : pi{write=(4.09e48)}; end; return (0x9);  end)))) do if ... then local package, utf8 = ...; for c=(table<=function () b = (false), {[(0xa5)]=(nil)}; return (({{(nil),(-( function (...) for self=[[]], (string), (#(((table : asin[[]])-(-function () function self:lines (...) e : pi{write=(9.42e25)}; end; return (0x9);  end)))) do if ... then local package, utf8 = ...; for b=(table<=[[]]), ..., ... do string = ((73e-4)); return (((#...))/math);  end;  end; math : loaded[[]]; local d = ""; if ... then if ... then if function (...) while ((false)) do e(); d{"",e}; local a = e;  end;  end then if (true) then if ... then local b, c = ((false)^(function (d) a = (c); e = a, a; return (1e5), e;  end)); break;  else if self then e{}; return e;  end; if ((nil)<c) then if {b} then e(); break;  end;  else d(); break;  end;  end;  end; break;  else if c then a""; break;  end; if [[]] then while (d"") do a(a); function d:os (a) e{}; self, package, io = (( function (d, c) function getinfo () local b = (nil); local table, a, e, d, utf8, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, table, e = function (e, e, package) ( (false) )[[]]; for debug=( not (nil)), [[]], (nil) do repeat function b:remove (...) function pi () b{e}; ( function (...) function getinfo () local b = (nil); local table, a, b, c, utf8, table, e = function (e, e, package) ( (false) )[[]]; for debug=( not (nil)), [[]], (nil) do repeat function b:remove (...) function pi () c{e}; e(); c = ""; end; do debug, string, table = ..., function () b = (false), {[(0xd9)]=(nil)}; return (({{(nil),(-( function (...) for self=[[]], (string), (#(((table : asin[[]])-(-function () function self:lines (...) e : pi{write=(4.09e48)}; end; return (0x9);  end)))) do if ... then local package, utf8 = ...; for c=(table<=[[]]), ..., ... do string = ((23e-4)); return (function (...) for self=[[]], (string), (#(((table : asin[[]])-(-function () function self:lines (...) e : pi{write=function () b = (false), {[(0xa5)]=(nil)}; return (({{(nil),(-( function (...) for self=[[]], (string), (#(((table : asin[[]])-(-function () function self:lines (...) e : pi{write=(9.42e25)}; end; return (0x9);  end)))) do if ... then local package, utf8 = ...; for b=(table<=[[]]), ..., ... do string = ((73e-4)); return (((#...))/math);  end;  end; math : loaded[[]]; local d = ""; if ... then if ... then if function (...) while ((false)) do e(); d{"",e}; local a = e;  end;  end then if (true) then if ... then local b, c = ((false)^(function (d) a = (c); e = a, a; return (1e5), e;  end)); break;  else if self then e{}; return e;  end; if ((nil)<c) then if {b} then e(); break;  end;  else d(); break;  end;  end;  end; break;  else if c then a""; break;  end; if [[]] then while (d"") do a(a); function d:os (a) e{}; self, package, io = (( c ) : os(...)); break; end;  end;  end;  end;  else a{};  end; e{};  end;  end; return c;  end ){})}}));  end}; end; return c;  end)))) do a{};  end; return c;  end/e);  end;  end; e();  end; return c;  end ){})}}));  end; d();  end; d""; end; d"";  until (e); break;  end; break;  end; end;  end ){}; e(); end; d(); end; d();  until (e); break;  end; break;  end; end;  end ) : os(...)); break; end;  end;  end;  end;  else a{};  end; e{};  end;  end; return c;  end ){})}}));  end), ..., ... do string = ((23e-4)); return (function (...) for self=[[]], (string), (#(((table : asin[[]])-(-function () function self:lines (...) e : pi{write=function () b = (false), {[(0xa5)]=(nil)}; return (({{(nil),(-( function (...) for self=[[]], (string), (#(((table : asin[[]])-(-function () function self:lines (...) e : pi{write=(9.42e25)}; end; return (0x9);  end)))) do if ... then local package, utf8 = ...; for b=(table<=[[]]), ..., ... do string = ((73e-4)); return (((#...))/math);  end;  end; math : loaded[[]]; local d = ""; if ... then if ... then if function (...) while ((false)) do e(); d{"",e}; local a = e;  end;  end then if (true) then if ... then local b, c = ((false)^(function (d) a = (c); e = a, a; return (1e5), e;  end)); break;  else if self then e{}; return e;  end; if ((nil)<c) then if {b} then e(); break;  end;  else d(); break;  end;  end;  end; break;  else if c then a""; break;  end; if [[]] then while (d"") do a(a); function d:os (a) e{}; self, package, io = (( c ) : os(...)); break; end;  end;  end;  end;  else a{};  end; e{};  end;  end; return c;  end ){})}}));  end}; end; return c;  end)))) do a{};  end; return c;  end/e);  end;  end; e();  end; return c;  end ){})}}));  end; d();  end; d""; end; d"";  until (e); break;  end; break;  end; end;  end ){}; e(); end; d(); end; d();  until (e); break;  end; break;  end; end;  end ){}; 